<?xml version="1.0"?>
<doc>
    <assembly>
        <name>G.Core.Fakes</name>
    </assembly>
    <members>
        <member name="T:G.Core.Fakes.ShimAssemblyProcessed">
            <summary>G.Core.AssemblyProcessed 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimAssemblyProcessed.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimAssemblyProcessed.#ctor(G.Core.AssemblyProcessed)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimAssemblyProcessed.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimAssemblyProcessed.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimAssemblyProcessed.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimAssemblyProcessed.Constructor">
            <summary>设置 AssemblyProcessed.AssemblyProcessed() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimAssemblyProcessed.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimClassHelper">
            <summary>G.Core.ClassHelper 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimClassHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimClassHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimClassHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimClassHelper.CreateInstanceOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>设置 ClassHelper.CreateInstance() 的 填充码</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimClassHelper.CreateInstanceOf1ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object[],``0})">
            <summary>设置 ClassHelper.CreateInstance(Object[] os) 的 填充码</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimClassHelper.GetValueOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 ClassHelper.GetValue(String fieldName) 的 填充码</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimClassHelper.SetValueOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,System.Object})">
            <summary>设置 ClassHelper.SetValue(String fieldName, Object value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimClassHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimClassHelper.CallFunctionObjectStringObjectArray">
            <summary>设置 ClassHelper.CallFunction(Object obj, String functionName, Object[] os) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimClassHelper.CreateInstanceString">
            <summary>设置 ClassHelper.CreateInstance(String className) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimClassHelper.CreateInstanceStringObjectArray">
            <summary>设置 ClassHelper.CreateInstance(String className, Object[] os) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimClassHelper.GetDateObject">
            <summary>设置 ClassHelper.GetDate(Object value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimClassHelper.GetTimeObject">
            <summary>设置 ClassHelper.GetTime(Object value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimClassHelper.GetValueObjectString">
            <summary>设置 ClassHelper.GetValue(Object obj, String fieldName) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimClassHelper.ObjectToStringObjectStringStringStringString">
            <summary>设置 ClassHelper.ObjectToString(Object o, String msg, String spliter, String nameTemplate, String nullString) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimClassHelper.SetValueObjectStringObject">
            <summary>设置 ClassHelper.SetValue(Object obj, String fieldName, Object value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimClassHelper.StaticConstructor">
            <summary>设置 ClassHelper.ClassHelper() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimCoreException">
            <summary>G.Core.CoreException 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimCoreException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimCoreException.#ctor(G.Core.CoreException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimCoreException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimCoreException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimCoreException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimCoreException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimCoreException.Constructor">
            <summary>设置 CoreException.CoreException() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimCoreException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 CoreException.CoreException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimCoreException.ConstructorString">
            <summary>设置 CoreException.CoreException(String errorMessage) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimCoreException.ConstructorStringException">
            <summary>设置 CoreException.CoreException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimCoreException.ConstructorStringObjectArray">
            <summary>设置 CoreException.CoreException(String msgFormat, Object[] os) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimCoreException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimFilt">
            <summary>G.Core.Filt 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimFilt.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimFilt.#ctor(G.Core.Filt)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimFilt.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimFilt.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.CaptionGet">
            <summary>设置 Filt.get_Caption() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.CaptionSetString">
            <summary>设置 Filt.set_Caption(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.CaptionValueGet">
            <summary>设置 Filt.get_CaptionValue() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.CaptionValueSetString">
            <summary>设置 Filt.set_CaptionValue(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.Constructor">
            <summary>设置 Filt.Filt() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.ConstructorStringStringStringStringStringString">
            <summary>设置 Filt.Filt(String fieldname, String fieldtype, String fieldoperator, String fieldvalue, String caption, String captionvalue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.ConstructorStringStringStringStringStringStringString">
            <summary>设置 Filt.Filt(String fieldname, String fieldtype, String startoperator, String startvalue, String endoperator, String endvalue, String caption) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.ConstructorStringStringStringStringStringStringStringString">
            <summary>设置 Filt.Filt(String prestr, String fieldname, String fieldtype, String fieldoperator, String fieldvalue, String caption, String captionvalue, String nextstr) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.ConstructorStringStringStringStringStringStringStringStringString">
            <summary>设置 Filt.Filt(String prestr, String fieldname, String fieldtype, String startoperator, String startvalue, String endoperator, String endvalue, String caption, String nextstr) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.EndOperatorGet">
            <summary>设置 Filt.get_EndOperator() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.EndOperatorSetString">
            <summary>设置 Filt.set_EndOperator(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.EndValueGet">
            <summary>设置 Filt.get_EndValue() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.EndValueSetString">
            <summary>设置 Filt.set_EndValue(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.FieldNameGet">
            <summary>设置 Filt.get_FieldName() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.FieldNameSetString">
            <summary>设置 Filt.set_FieldName(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.FieldTypeGet">
            <summary>设置 Filt.get_FieldType() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.FieldTypeSetString">
            <summary>设置 Filt.set_FieldType(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.NextStrGet">
            <summary>设置 Filt.get_NextStr() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.NextStrSetString">
            <summary>设置 Filt.set_NextStr(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.PreStrGet">
            <summary>设置 Filt.get_PreStr() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.PreStrSetString">
            <summary>设置 Filt.set_PreStr(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.StartOperatorGet">
            <summary>设置 Filt.get_StartOperator() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.StartOperatorSetString">
            <summary>设置 Filt.set_StartOperator(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.StartValueGet">
            <summary>设置 Filt.get_StartValue() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.StartValueSetString">
            <summary>设置 Filt.set_StartValue(String value) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimFilt.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.CaptionGet">
            <summary>设置 Filt.get_Caption() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.CaptionSetString">
            <summary>设置 Filt.set_Caption(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.CaptionValueGet">
            <summary>设置 Filt.get_CaptionValue() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.CaptionValueSetString">
            <summary>设置 Filt.set_CaptionValue(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.EndOperatorGet">
            <summary>设置 Filt.get_EndOperator() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.EndOperatorSetString">
            <summary>设置 Filt.set_EndOperator(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.EndValueGet">
            <summary>设置 Filt.get_EndValue() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.EndValueSetString">
            <summary>设置 Filt.set_EndValue(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.FieldNameGet">
            <summary>设置 Filt.get_FieldName() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.FieldNameSetString">
            <summary>设置 Filt.set_FieldName(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.FieldTypeGet">
            <summary>设置 Filt.get_FieldType() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.FieldTypeSetString">
            <summary>设置 Filt.set_FieldType(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.NextStrGet">
            <summary>设置 Filt.get_NextStr() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.NextStrSetString">
            <summary>设置 Filt.set_NextStr(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.PreStrGet">
            <summary>设置 Filt.get_PreStr() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.PreStrSetString">
            <summary>设置 Filt.set_PreStr(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.StartOperatorGet">
            <summary>设置 Filt.get_StartOperator() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.StartOperatorSetString">
            <summary>设置 Filt.set_StartOperator(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.StartValueGet">
            <summary>设置 Filt.get_StartValue() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilt.AllInstances.StartValueSetString">
            <summary>设置 Filt.set_StartValue(String value) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimFilter">
            <summary>G.Core.Filter 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimFilter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimFilter.#ctor(G.Core.Filter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimFilter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimFilter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AddAdvanceXmlFieldStringStringStringStringStringString">
            <summary>设置 Filter.AddAdvanceXmlField(String Parenthesis, String UnionSign, String FieldName, String DataType, String OPERATESIGN, String New_Value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AddComplexFiltStringStringStringStringStringString">
            <summary>设置 Filter.AddComplexFilt(String prestr, String fieldname, String fieldtype, String fieldoperator, String fieldvalue, String nextstr) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AddComplexFiltStringStringStringStringStringStringStringString">
            <summary>设置 Filter.AddComplexFilt(String prestr, String fieldname, String fieldtype, String fieldoperator, String fieldvalue, String caption, String captionvalue, String nextstr) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AddComplexFiltStringStringStringStringStringStringStringStringString">
            <summary>设置 Filter.AddComplexFilt(String prestr, String fieldname, String fieldtype, String startoperator, String startvalue, String endoperator, String endvalue, String caption, String nextstr) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AddFiltStringStringStringString">
            <summary>设置 Filter.AddFilt(String fieldname, String fieldtype, String fieldoperator, String fieldvalue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AddFiltStringStringStringStringStringString">
            <summary>设置 Filter.AddFilt(String fieldname, String fieldtype, String fieldoperator, String fieldvalue, String caption, String captionvalue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AddFiltStringStringStringStringStringStringString">
            <summary>设置 Filter.AddFilt(String fieldname, String fieldtype, String startoperator, String startvalue, String endoperator, String endvalue, String caption) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AddXmlFieldStringStringStringStringStringStringString">
            <summary>设置 Filter.AddXmlField(String Parenthesis, String UnionSign, String FieldName, String FieldCaption, String DataType, String OPERATESIGN, String New_Value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.Constructor">
            <summary>设置 Filter.Filter() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.ConstructorString">
            <summary>设置 Filter.Filter(String filter) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.CreateFilterXmlDoc">
            <summary>设置 Filter.CreateFilterXmlDoc() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.ListFiltGet">
            <summary>设置 Filter.get_ListFilt() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.ListFiltSetListOfFilt">
            <summary>设置 Filter.set_ListFilt(List`1&lt;Filt&gt; value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.OrderByGet">
            <summary>设置 Filter.get_OrderBy() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.OrderBySetString">
            <summary>设置 Filter.set_OrderBy(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.ToFiltString">
            <summary>设置 Filter.ToFiltString() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.ToShowString">
            <summary>设置 Filter.ToShowString() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.ToXml">
            <summary>设置 Filter.ToXml() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.getFieldNameStringString">
            <summary>设置 Filter.getFieldName(String fieldname, String type) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.getFiltValueStringStringString">
            <summary>设置 Filter.getFiltValue(String type, String value, String join) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.getOperatorString">
            <summary>设置 Filter.getOperator(String join) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimFilter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.AddAdvanceXmlFieldStringStringStringStringStringString">
            <summary>设置 Filter.AddAdvanceXmlField(String Parenthesis, String UnionSign, String FieldName, String DataType, String OPERATESIGN, String New_Value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.AddComplexFiltStringStringStringStringStringString">
            <summary>设置 Filter.AddComplexFilt(String prestr, String fieldname, String fieldtype, String fieldoperator, String fieldvalue, String nextstr) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.AddComplexFiltStringStringStringStringStringStringStringString">
            <summary>设置 Filter.AddComplexFilt(String prestr, String fieldname, String fieldtype, String fieldoperator, String fieldvalue, String caption, String captionvalue, String nextstr) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.AddComplexFiltStringStringStringStringStringStringStringStringString">
            <summary>设置 Filter.AddComplexFilt(String prestr, String fieldname, String fieldtype, String startoperator, String startvalue, String endoperator, String endvalue, String caption, String nextstr) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.AddFiltStringStringStringString">
            <summary>设置 Filter.AddFilt(String fieldname, String fieldtype, String fieldoperator, String fieldvalue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.AddFiltStringStringStringStringStringString">
            <summary>设置 Filter.AddFilt(String fieldname, String fieldtype, String fieldoperator, String fieldvalue, String caption, String captionvalue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.AddFiltStringStringStringStringStringStringString">
            <summary>设置 Filter.AddFilt(String fieldname, String fieldtype, String startoperator, String startvalue, String endoperator, String endvalue, String caption) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.AddXmlFieldStringStringStringStringStringStringString">
            <summary>设置 Filter.AddXmlField(String Parenthesis, String UnionSign, String FieldName, String FieldCaption, String DataType, String OPERATESIGN, String New_Value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.CreateFilterXmlDoc">
            <summary>设置 Filter.CreateFilterXmlDoc() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.ListFiltGet">
            <summary>设置 Filter.get_ListFilt() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.ListFiltSetListOfFilt">
            <summary>设置 Filter.set_ListFilt(List`1&lt;Filt&gt; value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.OrderByGet">
            <summary>设置 Filter.get_OrderBy() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.OrderBySetString">
            <summary>设置 Filter.set_OrderBy(String value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.ToFiltString">
            <summary>设置 Filter.ToFiltString() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.ToShowString">
            <summary>设置 Filter.ToShowString() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.ToXml">
            <summary>设置 Filter.ToXml() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.getFieldNameStringString">
            <summary>设置 Filter.getFieldName(String fieldname, String type) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.getFiltValueStringStringString">
            <summary>设置 Filter.getFiltValue(String type, String value, String join) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFilter.AllInstances.getOperatorString">
            <summary>设置 Filter.getOperator(String join) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimFlyweightBase`2">
            <summary>G.Core.FlyweightBase`2 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimFlyweightBase`2.#ctor(G.Core.FlyweightBase{`0,`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimFlyweightBase`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimFlyweightBase`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFlyweightBase`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFlyweightBase`2.CheckKeyT0">
            <summary>设置 FlyweightBase`2.CheckKey(!0 t) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFlyweightBase`2.Constructor">
            <summary>设置 FlyweightBase`2.FlyweightBase`2() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFlyweightBase`2.GetInstT0">
            <summary>设置 FlyweightBase`2.GetInst(!0 tk) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFlyweightBase`2.GetInstanceT0">
            <summary>设置 FlyweightBase`2.GetInstance(!0 t) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimFlyweightBase`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFlyweightBase`2.AllInstances.CheckKeyT0">
            <summary>设置 FlyweightBase`2.CheckKey(!0 t) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFlyweightBase`2.AllInstances.GetInstT0">
            <summary>设置 FlyweightBase`2.GetInst(!0 tk) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimFlyweightBase`2.AllInstances.GetInstanceT0">
            <summary>设置 FlyweightBase`2.GetInstance(!0 t) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimGConvert">
            <summary>G.Core.GConvert 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimGConvert.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimGConvert.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimGConvert.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.Bytes2BitsByteArray">
            <summary>设置 GConvert.Bytes2Bits(Byte[] byts) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.Bytes2BitsStringByteArrayInt32Int32">
            <summary>设置 GConvert.Bytes2BitsString(Byte[] bytes, Int32 index, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.Bytes2IntsByteArray">
            <summary>设置 GConvert.Bytes2Ints(Byte[] byts) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.Bytes2IntsString2ByteArrayInt32Int32">
            <summary>设置 GConvert.Bytes2IntsString2(Byte[] bytes, Int32 index, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.Bytes2IntsStringByteArrayInt32Int32">
            <summary>设置 GConvert.Bytes2IntsString(Byte[] bytes, Int32 index, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.DwordToFloatUInt32">
            <summary>设置 GConvert.DwordToFloat(UInt32 ui) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.FloatToDwordSingle">
            <summary>设置 GConvert.FloatToDword(Single f) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.GetBytesStringByteArrayInt32Int32String">
            <summary>设置 GConvert.GetBytesString(Byte[] bytes, Int32 index, Int32 count, String sep) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.GetBytesStringInt32Array">
            <summary>设置 GConvert.GetBytes(String type, Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.GetBytesStringInt32MdArray2">
            <summary>设置 GConvert.GetBytes(String type, Int32[,] value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.GetBytesStringStringArray">
            <summary>设置 GConvert.GetBytes(String type, String[] value) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.GetColorInt32">
            <summary>设置 GConvert.GetColor(Int32 argb) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.GetColorStringColor">
            <summary>设置 GConvert.GetColorString(Color c) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.GetIntsStringInt32ArrayString">
            <summary>设置 GConvert.GetIntsString(Int32[] ints, String sep) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.IntToWordInt32">
            <summary>设置 GConvert.IntToWord(Int32 f) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.ToBoolObject">
            <summary>设置 GConvert.ToBool(Object obj) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.ToDecimalObject">
            <summary>设置 GConvert.ToDecimal(Object obj) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.ToDecimalObjectInt32">
            <summary>设置 GConvert.ToDecimal(Object obj, Int32 digits) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.ToDecimalStringInt32">
            <summary>设置 GConvert.ToDecimal(String str, Int32 digits) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.ToIntObject">
            <summary>设置 GConvert.ToInt(Object obj) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.ToIntString">
            <summary>设置 GConvert.ToInt(String str) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.ToStringByBitsByteArray">
            <summary>设置 GConvert.ToStringByBits(Byte[] bytes) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimGConvert.WordToIntUInt16">
            <summary>设置 GConvert.WordToInt(UInt16 us) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimJsonHelper">
            <summary>G.Core.JsonHelper 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimJsonHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimJsonHelper.#ctor(G.Core.JsonHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimJsonHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimJsonHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimJsonHelper.Json2ObjectOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 JsonHelper.Json2Object(String jsonString) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.Constructor">
            <summary>设置 JsonHelper.JsonHelper() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.DataSet2JsonDataSet">
            <summary>设置 JsonHelper.DataSet2Json(DataSet ds) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.DataSet2JsonDataSetInt32">
            <summary>设置 JsonHelper.DataSet2Json(DataSet ds, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.DataSet2ObjectDataSet">
            <summary>设置 JsonHelper.DataSet2Object(DataSet ds) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.DataSet2ObjectDataSetInt32">
            <summary>设置 JsonHelper.DataSet2Object(DataSet ds, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.DataTable2JsonDataSet">
            <summary>设置 JsonHelper.DataTable2Json(DataSet ds) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.Getsettings">
            <summary>设置 JsonHelper.Getsettings() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.Json2DataSetString">
            <summary>设置 JsonHelper.Json2DataSet(String jsonString) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.JsonUpdateDataSetDataSetRefString">
            <summary>设置 JsonHelper.JsonUpdateDataSet(DataSet&amp; entity, String jsonString) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.Object2JsonObject">
            <summary>设置 JsonHelper.Object2Json(Object obj) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.StaticConstructor">
            <summary>设置 JsonHelper.JsonHelper() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper.ToChineseString">
            <summary>设置 JsonHelper.ToChinese(String data) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimJsonHelper._ToChineseb__0Match">
            <summary>设置 JsonHelper.&lt;ToChinese&gt;b__0(Match m) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimJsonHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimMiscProvider">
            <summary>G.Core.MiscProvider 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimMiscProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimMiscProvider.#ctor(G.Core.MiscProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimMiscProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimMiscProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.Constructor">
            <summary>设置 MiscProvider.MiscProvider() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.NewGuid">
            <summary>设置 MiscProvider.NewGuid() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.NowGet">
            <summary>设置 MiscProvider.get_Now() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.SecendsGet">
            <summary>设置 MiscProvider.get_Secends() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.SleepInt32">
            <summary>设置 MiscProvider.Sleep(Int32 millisecends) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.SystemRunningMillisecendsGet">
            <summary>设置 MiscProvider.get_SystemRunningMillisecends() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.ToLocalTimeDateTime">
            <summary>设置 MiscProvider.ToLocalTime(DateTime time) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.ToUniversalTimeDateTime">
            <summary>设置 MiscProvider.ToUniversalTime(DateTime time) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimMiscProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.AllInstances.NewGuid">
            <summary>设置 MiscProvider.NewGuid() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.AllInstances.NowGet">
            <summary>设置 MiscProvider.get_Now() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.AllInstances.SecendsGet">
            <summary>设置 MiscProvider.get_Secends() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.AllInstances.SleepInt32">
            <summary>设置 MiscProvider.Sleep(Int32 millisecends) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.AllInstances.SystemRunningMillisecendsGet">
            <summary>设置 MiscProvider.get_SystemRunningMillisecends() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.AllInstances.ToLocalTimeDateTime">
            <summary>设置 MiscProvider.ToLocalTime(DateTime time) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimMiscProvider.AllInstances.ToUniversalTimeDateTime">
            <summary>设置 MiscProvider.ToUniversalTime(DateTime time) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimRand">
            <summary>G.Core.Rand 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimRand.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimRand.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimRand.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimRand.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimRand.NextBytesByteArray">
            <summary>设置 Rand.NextBytes(Byte[] buffer) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimRand.NextDouble">
            <summary>设置 Rand.NextDouble() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimRand.NextInt32">
            <summary>设置 Rand.Next(Int32 maxValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimRand.NextInt32Int32">
            <summary>设置 Rand.Next(Int32 minValue, Int32 maxValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimRand.StaticConstructor">
            <summary>设置 Rand.Rand() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimResourceHelper">
            <summary>G.Core.ResourceHelper 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimResourceHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimResourceHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimResourceHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimResourceHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimResourceHelper.GetStreamReaderString">
            <summary>设置 ResourceHelper.GetStreamReader(String filePath) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimResourceHelper.GetStreamString">
            <summary>设置 ResourceHelper.GetStream(String filePath) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimResourceHelper.ReadAllStream">
            <summary>设置 ResourceHelper.ReadAll(Stream s) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimResourceHelper.ReadAllString">
            <summary>设置 ResourceHelper.ReadAll(String fullPath) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimResourceHelper.ReadToEndString">
            <summary>设置 ResourceHelper.ReadToEnd(String filePath) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimResourceHelper.StaticConstructor">
            <summary>设置 ResourceHelper.ResourceHelper() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimScope`1">
            <summary>G.Core.Scope`1 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimScope`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimScope`1.#ctor(G.Core.Scope{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimScope`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimScope`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimScope`1.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimScope`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimScope`1.ConstructorT0">
            <summary>设置 Scope`1.Scope`1(!0 instance) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimScope`1.ConstructorT0Boolean">
            <summary>设置 Scope`1.Scope`1(!0 instance, Boolean ownsInstance) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimScope`1.CurrentGet">
            <summary>设置 Scope`1.get_Current() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimScope`1.Dispose">
            <summary>设置 Scope`1.Dispose() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimScope`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimScope`1.AllInstances.Dispose">
            <summary>设置 Scope`1.Dispose() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimSettingException">
            <summary>G.Core.SettingException 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimSettingException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimSettingException.#ctor(G.Core.SettingException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimSettingException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimSettingException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimSettingException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSettingException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSettingException.Constructor">
            <summary>设置 SettingException.SettingException() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSettingException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 SettingException.SettingException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSettingException.ConstructorString">
            <summary>设置 SettingException.SettingException(String errorMessage) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSettingException.ConstructorStringException">
            <summary>设置 SettingException.SettingException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSettingException.ConstructorStringObjectArray">
            <summary>设置 SettingException.SettingException(String msgFormat, Object[] os) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimSettingException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimSystemHelper">
            <summary>G.Core.SystemHelper 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimSystemHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimSystemHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimSystemHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.BaseDirectoryGet">
            <summary>设置 SystemHelper.get_BaseDirectory() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.CallerFunctionNameGet">
            <summary>设置 SystemHelper.get_CallerFunctionName() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.CurrentDirectoryGet">
            <summary>设置 SystemHelper.get_CurrentDirectory() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.CurrentFunctionNameGet">
            <summary>设置 SystemHelper.get_CurrentFunctionName() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.ExeFileNameGet">
            <summary>设置 SystemHelper.get_ExeFileName() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.GetCurLineStackFrame">
            <summary>设置 SystemHelper.GetCurLine(StackFrame sf) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.GetDateTimeString">
            <summary>设置 SystemHelper.GetDateTimeString() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.GetDateTimeStringDateTime">
            <summary>设置 SystemHelper.GetDateTimeString(DateTime dt) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.GetMothodDescStackFrameBoolean">
            <summary>设置 SystemHelper.GetMothodDesc(StackFrame sf, Boolean needLineNo) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.GetStackTrackFunctionNameInt32">
            <summary>设置 SystemHelper.GetStackTrackFunctionName(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.StaticConstructor">
            <summary>设置 SystemHelper.SystemHelper() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper.TempDirectoryGet">
            <summary>设置 SystemHelper.get_TempDirectory() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimSystemHelper._cctorb__0">
            <summary>设置 SystemHelper.&lt;.cctor&gt;b__0() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.ShimUtil">
            <summary>G.Core.Util 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimUtil.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimUtil.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimUtil.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Fakes.ShimUtil.NewListOf1M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[],System.Collections.Generic.List{``0}})">
            <summary>设置 Util.NewList(!!0[] ts) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.AreEqualByteArrayByteArray">
            <summary>设置 Util.AreEqual(Byte[] o1, Byte[] o2) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.AreEqualObjectObject">
            <summary>设置 Util.AreEqual(Object o1, Object o2) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.AssertBoolean">
            <summary>设置 Util.Assert(Boolean assertCondition) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.AssertBooleanStringObjectArray">
            <summary>设置 Util.Assert(Boolean assertCondition, String failedMessage, Object[] os) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.CatchAllAction">
            <summary>设置 Util.CatchAll(Action callback) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.GetBig5Encoding">
            <summary>设置 Util.GetBig5Encoding() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.GetGbkEncoding">
            <summary>设置 Util.GetGbkEncoding() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.GetKoreaEncoding">
            <summary>设置 Util.GetKoreaEncoding() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.GetShiftJisEncoding">
            <summary>设置 Util.GetShiftJisEncoding() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.IfCatchExceptionBooleanAction">
            <summary>设置 Util.IfCatchException(Boolean catchException, Action callback) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.NewGuid">
            <summary>设置 Util.NewGuid() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.NowGet">
            <summary>设置 Util.get_Now() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.SecendsGet">
            <summary>设置 Util.get_Secends() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.SleepInt32">
            <summary>设置 Util.Sleep(Int32 millisecends) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.SystemRunningMillisecendsGet">
            <summary>设置 Util.get_SystemRunningMillisecends() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.ToLocalTimeDateTime">
            <summary>设置 Util.ToLocalTime(DateTime time) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.ToUniversalTimeDateTime">
            <summary>设置 Util.ToUniversalTime(DateTime time) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Fakes.ShimUtil.TryEnumerateObjectActionOfObject">
            <summary>设置 Util.TryEnumerate(Object obj, Action`1&lt;Object&gt; callback) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Fakes.StubAssemblyProcessed">
            <summary>G.Core.AssemblyProcessed 的存根类型</summary>
        </member>
        <member name="M:G.Core.Fakes.StubAssemblyProcessed.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubAssemblyProcessed.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubAssemblyProcessed.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubAssemblyProcessed.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubAssemblyProcessed.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubAssemblyProcessed.InitializeStub">
            <summary>初始化 type StubAssemblyProcessed 的新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubAssemblyProcessed.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubAssemblyProcessed.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubAssemblyProcessed.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubAssemblyProcessed.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubAssemblyProcessed.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubAssemblyProcessed.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Fakes.StubAssemblyProcessed.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Fakes.StubAssemblyProcessed.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Fakes.StubAssemblyProcessed.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:G.Core.Fakes.StubCoreException">
            <summary>G.Core.CoreException 的存根类型</summary>
        </member>
        <member name="M:G.Core.Fakes.StubCoreException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubCoreException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubCoreException.#ctor(System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubCoreException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubCoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubCoreException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubCoreException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:G.Core.Fakes.StubCoreException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubCoreException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:G.Core.Fakes.StubCoreException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubCoreException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubCoreException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubCoreException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubCoreException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubCoreException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubCoreException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubCoreException.InitializeStub">
            <summary>初始化 type StubCoreException 的新实例</summary>
        </member>
        <member name="F:G.Core.Fakes.StubCoreException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubCoreException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubCoreException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubCoreException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubCoreException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubCoreException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubCoreException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Fakes.StubCoreException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubCoreException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubCoreException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Fakes.StubCoreException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Fakes.StubCoreException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubCoreException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubCoreException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:G.Core.Fakes.StubFilt">
            <summary>G.Core.Filt 的存根类型</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFilt.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFilt.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFilt.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFilt.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFilt.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFilt.InitializeStub">
            <summary>初始化 type StubFilt 的新实例</summary>
        </member>
        <member name="P:G.Core.Fakes.StubFilt.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Fakes.StubFilt.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Fakes.StubFilt.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Fakes.StubFilter">
            <summary>G.Core.Filter 的存根类型</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFilter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFilter.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFilter.InitializeStub">
            <summary>初始化 type StubFilter 的新实例</summary>
        </member>
        <member name="P:G.Core.Fakes.StubFilter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Fakes.StubFilter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Fakes.StubFilter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Fakes.StubFlyweightBase`2">
            <summary>G.Core.FlyweightBase`2 的存根类型</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFlyweightBase`2.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFlyweightBase`2.CheckKey(`0)">
            <summary>设置 FlyweightBase`2.CheckKey(!0 t) 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubFlyweightBase`2.CheckKeyT0">
            <summary>设置 FlyweightBase`2.CheckKey(!0 t) 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFlyweightBase`2.CreateInst(`0)">
            <summary>设置 FlyweightBase`2.CreateInst(!0 t) 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubFlyweightBase`2.CreateInstT0">
            <summary>设置 FlyweightBase`2.CreateInst(!0 t) 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFlyweightBase`2.GetInst(`0)">
            <summary>设置 FlyweightBase`2.GetInst(!0 tk) 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubFlyweightBase`2.GetInstT0">
            <summary>设置 FlyweightBase`2.GetInst(!0 tk) 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubFlyweightBase`2.InitializeStub">
            <summary>初始化 type StubFlyweightBase 的新实例</summary>
        </member>
        <member name="P:G.Core.Fakes.StubFlyweightBase`2.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Fakes.StubFlyweightBase`2.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Fakes.StubFlyweightBase`2.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Fakes.StubJsonHelper">
            <summary>G.Core.JsonHelper 的存根类型</summary>
        </member>
        <member name="M:G.Core.Fakes.StubJsonHelper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubJsonHelper.InitializeStub">
            <summary>初始化 type StubJsonHelper 的新实例</summary>
        </member>
        <member name="P:G.Core.Fakes.StubJsonHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Fakes.StubJsonHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Fakes.StubJsonHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Fakes.StubMiscProvider">
            <summary>G.Core.MiscProvider 的存根类型</summary>
        </member>
        <member name="M:G.Core.Fakes.StubMiscProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubMiscProvider.InitializeStub">
            <summary>初始化 type StubMiscProvider 的新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubMiscProvider.NewGuid">
            <summary>设置 MiscProvider.NewGuid() 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubMiscProvider.NewGuid01">
            <summary>设置 MiscProvider.NewGuid() 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubMiscProvider.NowGet">
            <summary>设置 MiscProvider.get_Now() 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubMiscProvider.SecendsGet">
            <summary>设置 MiscProvider.get_Secends() 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubMiscProvider.Sleep(System.Int32)">
            <summary>设置 MiscProvider.Sleep(Int32 millisecends) 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubMiscProvider.SleepInt32">
            <summary>设置 MiscProvider.Sleep(Int32 millisecends) 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubMiscProvider.SystemRunningMillisecendsGet">
            <summary>设置 MiscProvider.get_SystemRunningMillisecends() 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubMiscProvider.ToLocalTime(System.DateTime)">
            <summary>设置 MiscProvider.ToLocalTime(DateTime time) 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubMiscProvider.ToLocalTimeDateTime">
            <summary>设置 MiscProvider.ToLocalTime(DateTime time) 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubMiscProvider.ToUniversalTime(System.DateTime)">
            <summary>设置 MiscProvider.ToUniversalTime(DateTime time) 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubMiscProvider.ToUniversalTimeDateTime">
            <summary>设置 MiscProvider.ToUniversalTime(DateTime time) 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubMiscProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Fakes.StubMiscProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Fakes.StubMiscProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Fakes.StubMiscProvider.Now">
            <summary>设置 MiscProvider.get_Now() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubMiscProvider.Secends">
            <summary>设置 MiscProvider.get_Secends() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubMiscProvider.SystemRunningMillisecends">
            <summary>设置 MiscProvider.get_SystemRunningMillisecends() 的 stub</summary>
        </member>
        <member name="T:G.Core.Fakes.StubSettingException">
            <summary>G.Core.SettingException 的存根类型</summary>
        </member>
        <member name="M:G.Core.Fakes.StubSettingException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubSettingException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubSettingException.#ctor(System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubSettingException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubSettingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Fakes.StubSettingException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubSettingException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:G.Core.Fakes.StubSettingException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubSettingException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:G.Core.Fakes.StubSettingException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubSettingException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubSettingException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubSettingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubSettingException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubSettingException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubSettingException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubSettingException.InitializeStub">
            <summary>初始化 type StubSettingException 的新实例</summary>
        </member>
        <member name="F:G.Core.Fakes.StubSettingException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubSettingException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubSettingException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:G.Core.Fakes.StubSettingException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:G.Core.Fakes.StubSettingException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:G.Core.Fakes.StubSettingException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubSettingException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Fakes.StubSettingException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubSettingException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubSettingException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Fakes.StubSettingException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Fakes.StubSettingException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubSettingException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:G.Core.Fakes.StubSettingException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.ShimDependenceEntryAttribute">
            <summary>G.Core.Ioc.DependenceEntryAttribute 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimDependenceEntryAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimDependenceEntryAttribute.#ctor(G.Core.Ioc.DependenceEntryAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimDependenceEntryAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimDependenceEntryAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimDependenceEntryAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimDependenceEntryAttribute.Constructor">
            <summary>设置 DependenceEntryAttribute.DependenceEntryAttribute() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.ShimDependenceEntryAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.ShimImplementationAttribute">
            <summary>G.Core.Ioc.ImplementationAttribute 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimImplementationAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimImplementationAttribute.#ctor(G.Core.Ioc.ImplementationAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimImplementationAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimImplementationAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimImplementationAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimImplementationAttribute.ConstructorInt32">
            <summary>设置 ImplementationAttribute.ImplementationAttribute(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimImplementationAttribute.ConstructorInt32String">
            <summary>设置 ImplementationAttribute.ImplementationAttribute(Int32 index, String name) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimImplementationAttribute.ConstructorString">
            <summary>设置 ImplementationAttribute.ImplementationAttribute(String name) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.ShimImplementationAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.ShimInjectionAttribute">
            <summary>G.Core.Ioc.InjectionAttribute 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimInjectionAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimInjectionAttribute.#ctor(G.Core.Ioc.InjectionAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimInjectionAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimInjectionAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimInjectionAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimInjectionAttribute.Constructor">
            <summary>设置 InjectionAttribute.InjectionAttribute() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimInjectionAttribute.ConstructorInt32">
            <summary>设置 InjectionAttribute.InjectionAttribute(Int32 index) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.ShimInjectionAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.ShimIocException">
            <summary>G.Core.Ioc.IocException 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimIocException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimIocException.#ctor(G.Core.Ioc.IocException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimIocException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimIocException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimIocException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimIocException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimIocException.Constructor">
            <summary>设置 IocException.IocException() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimIocException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 IocException.IocException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimIocException.ConstructorString">
            <summary>设置 IocException.IocException(String errorMessage) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimIocException.ConstructorStringException">
            <summary>设置 IocException.IocException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimIocException.ConstructorStringObjectArray">
            <summary>设置 IocException.IocException(String msgFormat, Object[] os) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.ShimIocException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.ShimSimpleContainer">
            <summary>G.Core.Ioc.SimpleContainer 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimSimpleContainer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimSimpleContainer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimSimpleContainer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimSimpleContainer.GetOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>设置 SimpleContainer.Get() 的 填充码</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimSimpleContainer.GetOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,``0})">
            <summary>设置 SimpleContainer.Get(Int32 index) 的 填充码</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.ShimSimpleContainer.GetOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 SimpleContainer.Get(String name) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimSimpleContainer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimSimpleContainer.GetIocSearchPathStringString">
            <summary>设置 SimpleContainer.GetIocSearchPath(String path, String binPath) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.ShimSimpleContainer.StaticConstructor">
            <summary>设置 SimpleContainer.SimpleContainer() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.StubDependenceEntryAttribute">
            <summary>G.Core.Ioc.DependenceEntryAttribute 的存根类型</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.InitializeStub">
            <summary>初始化 type StubDependenceEntryAttribute 的新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubDependenceEntryAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.StubImplementationAttribute">
            <summary>G.Core.Ioc.ImplementationAttribute 的存根类型</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubImplementationAttribute.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubImplementationAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubImplementationAttribute.#ctor(System.Int32,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubImplementationAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubImplementationAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubImplementationAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubImplementationAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubImplementationAttribute.InitializeStub">
            <summary>初始化 type StubImplementationAttribute 的新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubImplementationAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubImplementationAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubImplementationAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubImplementationAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubImplementationAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubImplementationAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubImplementationAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubImplementationAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubImplementationAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.StubInjectionAttribute">
            <summary>G.Core.Ioc.InjectionAttribute 的存根类型</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubInjectionAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubInjectionAttribute.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubInjectionAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubInjectionAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubInjectionAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubInjectionAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubInjectionAttribute.InitializeStub">
            <summary>初始化 type StubInjectionAttribute 的新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubInjectionAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubInjectionAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubInjectionAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubInjectionAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubInjectionAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubInjectionAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubInjectionAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubInjectionAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubInjectionAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:G.Core.Ioc.Fakes.StubIocException">
            <summary>G.Core.Ioc.IocException 的存根类型</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubIocException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubIocException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubIocException.#ctor(System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubIocException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubIocException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubIocException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubIocException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubIocException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubIocException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubIocException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubIocException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubIocException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubIocException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubIocException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubIocException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubIocException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubIocException.InitializeStub">
            <summary>初始化 type StubIocException 的新实例</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubIocException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubIocException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubIocException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubIocException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:G.Core.Ioc.Fakes.StubIocException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:G.Core.Ioc.Fakes.StubIocException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubIocException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubIocException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubIocException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubIocException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubIocException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubIocException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubIocException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:G.Core.Ioc.Fakes.StubIocException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimCacheTextFileRecorder">
            <summary>G.Core.Logging.CacheTextFileRecorder 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimCacheTextFileRecorder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimCacheTextFileRecorder.#ctor(G.Core.Logging.CacheTextFileRecorder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimCacheTextFileRecorder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimCacheTextFileRecorder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimCacheTextFileRecorder.Bind(G.Core.Logging.ILogRecorder)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimCacheTextFileRecorder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimCacheTextFileRecorder.Constructor">
            <summary>设置 CacheTextFileRecorder.CacheTextFileRecorder() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimCacheTextFileRecorder.ProcessLogSysLogTypeStringStringException">
            <summary>设置 CacheTextFileRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimCacheTextFileRecorder.TimeUpObject">
            <summary>设置 CacheTextFileRecorder.TimeUp(Object state) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimCacheTextFileRecorder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimCacheTextFileRecorder.AllInstances.ProcessLogSysLogTypeStringStringException">
            <summary>设置 CacheTextFileRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimCacheTextFileRecorder.AllInstances.TimeUpObject">
            <summary>设置 CacheTextFileRecorder.TimeUp(Object state) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimConsoleLogRecorder">
            <summary>G.Core.Logging.ConsoleLogRecorder 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimConsoleLogRecorder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimConsoleLogRecorder.#ctor(G.Core.Logging.ConsoleLogRecorder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimConsoleLogRecorder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimConsoleLogRecorder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimConsoleLogRecorder.Bind(G.Core.Logging.ILogRecorder)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimConsoleLogRecorder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimConsoleLogRecorder.Constructor">
            <summary>设置 ConsoleLogRecorder.ConsoleLogRecorder() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimConsoleLogRecorder.ProcessLogSysLogTypeStringStringException">
            <summary>设置 ConsoleLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimConsoleLogRecorder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimConsoleLogRecorder.AllInstances.ProcessLogSysLogTypeStringStringException">
            <summary>设置 ConsoleLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimConsoleMessageLogRecorder">
            <summary>G.Core.Logging.ConsoleMessageLogRecorder 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimConsoleMessageLogRecorder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimConsoleMessageLogRecorder.#ctor(G.Core.Logging.ConsoleMessageLogRecorder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimConsoleMessageLogRecorder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimConsoleMessageLogRecorder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimConsoleMessageLogRecorder.Bind(G.Core.Logging.ILogRecorder)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimConsoleMessageLogRecorder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimConsoleMessageLogRecorder.Constructor">
            <summary>设置 ConsoleMessageLogRecorder.ConsoleMessageLogRecorder() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimConsoleMessageLogRecorder.CountGet">
            <summary>设置 ConsoleMessageLogRecorder.get_Count() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimConsoleMessageLogRecorder.ProcessLogSysLogTypeStringStringException">
            <summary>设置 ConsoleMessageLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimConsoleMessageLogRecorder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimConsoleMessageLogRecorder.AllInstances.ProcessLogSysLogTypeStringStringException">
            <summary>设置 ConsoleMessageLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimDebugLogRecorder">
            <summary>G.Core.Logging.DebugLogRecorder 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimDebugLogRecorder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimDebugLogRecorder.#ctor(G.Core.Logging.DebugLogRecorder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimDebugLogRecorder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimDebugLogRecorder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimDebugLogRecorder.Bind(G.Core.Logging.ILogRecorder)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimDebugLogRecorder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimDebugLogRecorder.Constructor">
            <summary>设置 DebugLogRecorder.DebugLogRecorder() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimDebugLogRecorder.DebugPrintStringObjectArray">
            <summary>设置 DebugLogRecorder.DebugPrint(String msg, Object[] os) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimDebugLogRecorder.ProcessLogSysLogTypeStringStringException">
            <summary>设置 DebugLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimDebugLogRecorder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimDebugLogRecorder.AllInstances.ProcessLogSysLogTypeStringStringException">
            <summary>设置 DebugLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimDtsFileLogRecorder">
            <summary>G.Core.Logging.DtsFileLogRecorder 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimDtsFileLogRecorder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimDtsFileLogRecorder.#ctor(G.Core.Logging.DtsFileLogRecorder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimDtsFileLogRecorder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimDtsFileLogRecorder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimDtsFileLogRecorder.Bind(G.Core.Logging.ILogRecorder)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimDtsFileLogRecorder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimDtsFileLogRecorder.Constructor">
            <summary>设置 DtsFileLogRecorder.DtsFileLogRecorder() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimDtsFileLogRecorder.GetString4DtsObject">
            <summary>设置 DtsFileLogRecorder.GetString4Dts(Object o) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimDtsFileLogRecorder.WriteLogStreamWriterSysLogTypeStringStringException">
            <summary>设置 DtsFileLogRecorder.WriteLog(StreamWriter sw, SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimDtsFileLogRecorder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimDtsFileLogRecorder.AllInstances.WriteLogStreamWriterSysLogTypeStringStringException">
            <summary>设置 DtsFileLogRecorder.WriteLog(StreamWriter sw, SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimLogger">
            <summary>G.Core.Logging.Logger 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimLogger.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimLogger.#ctor(G.Core.Logging.Logger)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimLogger.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimLogger.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.Constructor">
            <summary>设置 Logger.Logger() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.ConstructorILogRecorderArray">
            <summary>设置 Logger.Logger(ILogRecorder[] recorders) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.ConstructorString">
            <summary>设置 Logger.Logger(String settingName) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.DebugFuncOfObject">
            <summary>设置 Logger.Debug(Func`1&lt;Object&gt; callback) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.DebugObject">
            <summary>设置 Logger.Debug(Object message) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.ErrorException">
            <summary>设置 Logger.Error(Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.ErrorFuncOfObjectException">
            <summary>设置 Logger.Error(Func`1&lt;Object&gt; callback, Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.ErrorObject">
            <summary>设置 Logger.Error(Object message) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.ErrorObjectException">
            <summary>设置 Logger.Error(Object message, Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.FatalException">
            <summary>设置 Logger.Fatal(Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.FatalFuncOfObjectException">
            <summary>设置 Logger.Fatal(Func`1&lt;Object&gt; callback, Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.FatalObject">
            <summary>设置 Logger.Fatal(Object message) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.FatalObjectException">
            <summary>设置 Logger.Fatal(Object message, Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.GetLogRecorders">
            <summary>设置 Logger.GetLogRecorders() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.InfoFuncOfObject">
            <summary>设置 Logger.Info(Func`1&lt;Object&gt; callback) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.InfoObject">
            <summary>设置 Logger.Info(Object message) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.LogSysLogTypeStringStringException">
            <summary>设置 Logger.Log(SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.StaticConstructor">
            <summary>设置 Logger.Logger() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.TraceFuncOfObject">
            <summary>设置 Logger.Trace(Func`1&lt;Object&gt; callback) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.TraceObject">
            <summary>设置 Logger.Trace(Object message) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.WarnException">
            <summary>设置 Logger.Warn(Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.WarnFuncOfObject">
            <summary>设置 Logger.Warn(Func`1&lt;Object&gt; callback) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.WarnFuncOfObjectException">
            <summary>设置 Logger.Warn(Func`1&lt;Object&gt; callback, Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.WarnObject">
            <summary>设置 Logger.Warn(Object message) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.WarnObjectException">
            <summary>设置 Logger.Warn(Object message, Exception ex) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimLogger.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.DebugFuncOfObject">
            <summary>设置 Logger.Debug(Func`1&lt;Object&gt; callback) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.DebugObject">
            <summary>设置 Logger.Debug(Object message) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.ErrorException">
            <summary>设置 Logger.Error(Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.ErrorFuncOfObjectException">
            <summary>设置 Logger.Error(Func`1&lt;Object&gt; callback, Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.ErrorObject">
            <summary>设置 Logger.Error(Object message) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.ErrorObjectException">
            <summary>设置 Logger.Error(Object message, Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.FatalException">
            <summary>设置 Logger.Fatal(Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.FatalFuncOfObjectException">
            <summary>设置 Logger.Fatal(Func`1&lt;Object&gt; callback, Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.FatalObject">
            <summary>设置 Logger.Fatal(Object message) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.FatalObjectException">
            <summary>设置 Logger.Fatal(Object message, Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.GetLogRecorders">
            <summary>设置 Logger.GetLogRecorders() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.InfoFuncOfObject">
            <summary>设置 Logger.Info(Func`1&lt;Object&gt; callback) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.InfoObject">
            <summary>设置 Logger.Info(Object message) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.LogSysLogTypeStringStringException">
            <summary>设置 Logger.Log(SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.TraceFuncOfObject">
            <summary>设置 Logger.Trace(Func`1&lt;Object&gt; callback) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.TraceObject">
            <summary>设置 Logger.Trace(Object message) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.WarnException">
            <summary>设置 Logger.Warn(Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.WarnFuncOfObject">
            <summary>设置 Logger.Warn(Func`1&lt;Object&gt; callback) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.WarnFuncOfObjectException">
            <summary>设置 Logger.Warn(Func`1&lt;Object&gt; callback, Exception ex) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.WarnObject">
            <summary>设置 Logger.Warn(Object message) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimLogger.AllInstances.WarnObjectException">
            <summary>设置 Logger.Warn(Object message, Exception ex) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimTextFileLogRecorder">
            <summary>G.Core.Logging.TextFileLogRecorder 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimTextFileLogRecorder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimTextFileLogRecorder.#ctor(G.Core.Logging.TextFileLogRecorder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimTextFileLogRecorder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimTextFileLogRecorder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimTextFileLogRecorder.Bind(G.Core.Logging.ILogRecorder)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileLogRecorder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileLogRecorder.Constructor">
            <summary>设置 TextFileLogRecorder.TextFileLogRecorder() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileLogRecorder.GetLogFileName">
            <summary>设置 TextFileLogRecorder.GetLogFileName() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileLogRecorder.Init">
            <summary>设置 TextFileLogRecorder.Init() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileLogRecorder.ProcessLogSysLogTypeStringStringException">
            <summary>设置 TextFileLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileLogRecorder.WriteLogStreamWriterSysLogTypeStringStringException">
            <summary>设置 TextFileLogRecorder.WriteLog(StreamWriter sw, SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimTextFileLogRecorder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileLogRecorder.AllInstances.GetLogFileName">
            <summary>设置 TextFileLogRecorder.GetLogFileName() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileLogRecorder.AllInstances.Init">
            <summary>设置 TextFileLogRecorder.Init() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileLogRecorder.AllInstances.ProcessLogSysLogTypeStringStringException">
            <summary>设置 TextFileLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileLogRecorder.AllInstances.WriteLogStreamWriterSysLogTypeStringStringException">
            <summary>设置 TextFileLogRecorder.WriteLog(StreamWriter sw, SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimTextFileMessageLogRecorder">
            <summary>G.Core.Logging.TextFileMessageLogRecorder 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimTextFileMessageLogRecorder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimTextFileMessageLogRecorder.#ctor(G.Core.Logging.TextFileMessageLogRecorder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimTextFileMessageLogRecorder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimTextFileMessageLogRecorder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.ShimTextFileMessageLogRecorder.Bind(G.Core.Logging.ILogRecorder)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileMessageLogRecorder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileMessageLogRecorder.Constructor">
            <summary>设置 TextFileMessageLogRecorder.TextFileMessageLogRecorder() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileMessageLogRecorder.WriteLogStreamWriterSysLogTypeStringStringException">
            <summary>设置 TextFileMessageLogRecorder.WriteLog(StreamWriter sw, SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.ShimTextFileMessageLogRecorder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.ShimTextFileMessageLogRecorder.AllInstances.WriteLogStreamWriterSysLogTypeStringStringException">
            <summary>设置 TextFileMessageLogRecorder.WriteLog(StreamWriter sw, SysLogType type, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.StubCacheTextFileRecorder">
            <summary>G.Core.Logging.CacheTextFileRecorder 的存根类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubCacheTextFileRecorder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubCacheTextFileRecorder.InitializeStub">
            <summary>初始化 type StubCacheTextFileRecorder 的新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubCacheTextFileRecorder.ProcessLog(G.Core.Logging.SysLogType,System.String,System.String,System.Exception)">
            <summary>设置 CacheTextFileRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 存根</summary>
        </member>
        <member name="F:G.Core.Logging.Fakes.StubCacheTextFileRecorder.ProcessLogSysLogTypeStringStringException">
            <summary>设置 CacheTextFileRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 stub</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubCacheTextFileRecorder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubCacheTextFileRecorder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubCacheTextFileRecorder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.StubConsoleLogRecorder">
            <summary>G.Core.Logging.ConsoleLogRecorder 的存根类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubConsoleLogRecorder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubConsoleLogRecorder.InitializeStub">
            <summary>初始化 type StubConsoleLogRecorder 的新实例</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubConsoleLogRecorder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubConsoleLogRecorder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubConsoleLogRecorder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.StubConsoleMessageLogRecorder">
            <summary>G.Core.Logging.ConsoleMessageLogRecorder 的存根类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubConsoleMessageLogRecorder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubConsoleMessageLogRecorder.InitializeStub">
            <summary>初始化 type StubConsoleMessageLogRecorder 的新实例</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubConsoleMessageLogRecorder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubConsoleMessageLogRecorder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubConsoleMessageLogRecorder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.StubDebugLogRecorder">
            <summary>G.Core.Logging.DebugLogRecorder 的存根类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubDebugLogRecorder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubDebugLogRecorder.InitializeStub">
            <summary>初始化 type StubDebugLogRecorder 的新实例</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubDebugLogRecorder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubDebugLogRecorder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubDebugLogRecorder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.StubDtsFileLogRecorder">
            <summary>G.Core.Logging.DtsFileLogRecorder 的存根类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubDtsFileLogRecorder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubDtsFileLogRecorder.InitializeStub">
            <summary>初始化 type StubDtsFileLogRecorder 的新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubDtsFileLogRecorder.ProcessLog(G.Core.Logging.SysLogType,System.String,System.String,System.Exception)">
            <summary>设置 TextFileLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 存根</summary>
        </member>
        <member name="F:G.Core.Logging.Fakes.StubDtsFileLogRecorder.ProcessLogSysLogTypeStringStringException">
            <summary>设置 TextFileLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 stub</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubDtsFileLogRecorder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubDtsFileLogRecorder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubDtsFileLogRecorder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.StubILogRecorder">
            <summary>G.Core.Logging.ILogRecorder 的存根类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubILogRecorder.#ctor">
            <summary>初始化 type StubILogRecorder 的新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubILogRecorder.gc::G#Core#Logging#ILogRecorder#ProcessLog(G.Core.Logging.SysLogType,System.String,System.String,System.Exception)">
            <summary>设置 ILogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 存根</summary>
        </member>
        <member name="F:G.Core.Logging.Fakes.StubILogRecorder.ProcessLogSysLogTypeStringStringException">
            <summary>设置 ILogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 stub</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.StubLogger">
            <summary>G.Core.Logging.Logger 的存根类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubLogger.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubLogger.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubLogger.#ctor(G.Core.Logging.ILogRecorder[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubLogger.InitializeStub">
            <summary>初始化 type StubLogger 的新实例</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubLogger.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubLogger.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubLogger.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.StubTextFileLogRecorder">
            <summary>G.Core.Logging.TextFileLogRecorder 的存根类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubTextFileLogRecorder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubTextFileLogRecorder.InitializeStub">
            <summary>初始化 type StubTextFileLogRecorder 的新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubTextFileLogRecorder.ProcessLog(G.Core.Logging.SysLogType,System.String,System.String,System.Exception)">
            <summary>设置 TextFileLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 存根</summary>
        </member>
        <member name="F:G.Core.Logging.Fakes.StubTextFileLogRecorder.ProcessLogSysLogTypeStringStringException">
            <summary>设置 TextFileLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 stub</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubTextFileLogRecorder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubTextFileLogRecorder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubTextFileLogRecorder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Logging.Fakes.StubTextFileMessageLogRecorder">
            <summary>G.Core.Logging.TextFileMessageLogRecorder 的存根类型</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubTextFileMessageLogRecorder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubTextFileMessageLogRecorder.InitializeStub">
            <summary>初始化 type StubTextFileMessageLogRecorder 的新实例</summary>
        </member>
        <member name="M:G.Core.Logging.Fakes.StubTextFileMessageLogRecorder.ProcessLog(G.Core.Logging.SysLogType,System.String,System.String,System.Exception)">
            <summary>设置 TextFileLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 存根</summary>
        </member>
        <member name="F:G.Core.Logging.Fakes.StubTextFileMessageLogRecorder.ProcessLogSysLogTypeStringStringException">
            <summary>设置 TextFileLogRecorder.ProcessLog(SysLogType type, String name, String message, Exception exception) 的 stub</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubTextFileMessageLogRecorder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubTextFileMessageLogRecorder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Logging.Fakes.StubTextFileMessageLogRecorder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimConfigHelper">
            <summary>G.Core.Setting.ConfigHelper 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigHelper.#ctor(G.Core.Setting.ConfigHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelper.Constructor">
            <summary>设置 ConfigHelper.ConfigHelper() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelper.ConstructorString">
            <summary>设置 ConfigHelper.ConfigHelper(String sectionName) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelper.GetStringString">
            <summary>设置 ConfigHelper.GetString(String key) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelper.StaticConstructor">
            <summary>设置 ConfigHelper.ConfigHelper() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimConfigHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelper.AllInstances.GetStringString">
            <summary>设置 ConfigHelper.GetString(String key) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimConfigHelperBase">
            <summary>G.Core.Setting.ConfigHelperBase 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigHelperBase.#ctor(G.Core.Setting.ConfigHelperBase)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigHelperBase.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigHelperBase.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.Constructor">
            <summary>设置 ConfigHelperBase.ConfigHelperBase() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.GetValueString">
            <summary>设置 ConfigHelperBase.GetValue(String key) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.GetValueStringBoolean">
            <summary>设置 ConfigHelperBase.GetValue(String key, Boolean defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.GetValueStringDate">
            <summary>设置 ConfigHelperBase.GetValue(String key, Date defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.GetValueStringDateTime">
            <summary>设置 ConfigHelperBase.GetValue(String key, DateTime defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.GetValueStringDouble">
            <summary>设置 ConfigHelperBase.GetValue(String key, Double defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.GetValueStringInt32">
            <summary>设置 ConfigHelperBase.GetValue(String key, Int32 defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.GetValueStringInt64">
            <summary>设置 ConfigHelperBase.GetValue(String key, Int64 defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.GetValueStringObject">
            <summary>设置 ConfigHelperBase.GetValue(String key, Object defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.GetValueStringSingle">
            <summary>设置 ConfigHelperBase.GetValue(String key, Single defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.GetValueStringString">
            <summary>设置 ConfigHelperBase.GetValue(String key, String defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.GetValueStringTime">
            <summary>设置 ConfigHelperBase.GetValue(String key, Time defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.InitClassObject">
            <summary>设置 ConfigHelperBase.InitClass(Object obj) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances.GetValueString">
            <summary>设置 ConfigHelperBase.GetValue(String key) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances.GetValueStringBoolean">
            <summary>设置 ConfigHelperBase.GetValue(String key, Boolean defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances.GetValueStringDate">
            <summary>设置 ConfigHelperBase.GetValue(String key, Date defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances.GetValueStringDateTime">
            <summary>设置 ConfigHelperBase.GetValue(String key, DateTime defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances.GetValueStringDouble">
            <summary>设置 ConfigHelperBase.GetValue(String key, Double defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances.GetValueStringInt32">
            <summary>设置 ConfigHelperBase.GetValue(String key, Int32 defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances.GetValueStringInt64">
            <summary>设置 ConfigHelperBase.GetValue(String key, Int64 defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances.GetValueStringObject">
            <summary>设置 ConfigHelperBase.GetValue(String key, Object defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances.GetValueStringSingle">
            <summary>设置 ConfigHelperBase.GetValue(String key, Single defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances.GetValueStringString">
            <summary>设置 ConfigHelperBase.GetValue(String key, String defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances.GetValueStringTime">
            <summary>设置 ConfigHelperBase.GetValue(String key, Time defaultValue) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigHelperBase.AllInstances.InitClassObject">
            <summary>设置 ConfigHelperBase.InitClass(Object obj) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimConfigReader">
            <summary>G.Core.Setting.ConfigReader 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigReader.#ctor(G.Core.Setting.ConfigReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigReader.Constructor">
            <summary>设置 ConfigReader.ConfigReader() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigReader.GetSectionString">
            <summary>设置 ConfigReader.GetSection(String sectionName) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimConfigReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigReader.AllInstances.GetSectionString">
            <summary>设置 ConfigReader.GetSection(String sectionName) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimConfigReaderProxy">
            <summary>G.Core.Setting.ConfigReaderProxy 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigReaderProxy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigReaderProxy.#ctor(G.Core.Setting.ConfigReaderProxy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigReaderProxy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimConfigReaderProxy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigReaderProxy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigReaderProxy.Constructor">
            <summary>设置 ConfigReaderProxy.ConfigReaderProxy() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigReaderProxy.GetSectionString">
            <summary>设置 ConfigReaderProxy.GetSection(String sectionName) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigReaderProxy.InstanceGet">
            <summary>设置 ConfigReaderProxy.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigReaderProxy.SetInstanceConfigReader">
            <summary>设置 ConfigReaderProxy.SetInstance(ConfigReader r) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigReaderProxy.StaticConstructor">
            <summary>设置 ConfigReaderProxy.ConfigReaderProxy() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimConfigReaderProxy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimConfigReaderProxy.AllInstances.GetSectionString">
            <summary>设置 ConfigReaderProxy.GetSection(String sectionName) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimCoreSettings">
            <summary>G.Core.Setting.CoreSettings 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimCoreSettings.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimCoreSettings.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimCoreSettings.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimCoreSettings.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimCoreSettings.StaticConstructor">
            <summary>设置 CoreSettings.CoreSettings() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimNameValueSectionHandler">
            <summary>G.Core.Setting.NameValueSectionHandler 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimNameValueSectionHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimNameValueSectionHandler.#ctor(G.Core.Setting.NameValueSectionHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimNameValueSectionHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimNameValueSectionHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimNameValueSectionHandler.Bind(System.Configuration.IConfigurationSectionHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimNameValueSectionHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimNameValueSectionHandler.Constructor">
            <summary>设置 NameValueSectionHandler.NameValueSectionHandler() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimNameValueSectionHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimResourceConfigReader">
            <summary>G.Core.Setting.ResourceConfigReader 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimResourceConfigReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimResourceConfigReader.#ctor(G.Core.Setting.ResourceConfigReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimResourceConfigReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.ShimResourceConfigReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimResourceConfigReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimResourceConfigReader.Constructor">
            <summary>设置 ResourceConfigReader.ResourceConfigReader() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimResourceConfigReader.GetSectionString">
            <summary>设置 ResourceConfigReader.GetSection(String sectionName) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimResourceConfigReader.InitAllXmlConfigFiles">
            <summary>设置 ResourceConfigReader.InitAllXmlConfigFiles() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimResourceConfigReader.ParseConfigString">
            <summary>设置 ResourceConfigReader.ParseConfig(String s) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.ShimResourceConfigReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimResourceConfigReader.AllInstances.GetSectionString">
            <summary>设置 ResourceConfigReader.GetSection(String sectionName) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimResourceConfigReader.AllInstances.InitAllXmlConfigFiles">
            <summary>设置 ResourceConfigReader.InitAllXmlConfigFiles() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.ShimResourceConfigReader.AllInstances.ParseConfigString">
            <summary>设置 ResourceConfigReader.ParseConfig(String s) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.StubConfigHelper">
            <summary>G.Core.Setting.ConfigHelper 的存根类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubConfigHelper.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubConfigHelper.GetString(System.String)">
            <summary>设置 ConfigHelper.GetString(String key) 的 存根</summary>
        </member>
        <member name="F:G.Core.Setting.Fakes.StubConfigHelper.GetStringString">
            <summary>设置 ConfigHelper.GetString(String key) 的 stub</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubConfigHelper.InitializeStub">
            <summary>初始化 type StubConfigHelper 的新实例</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubConfigHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubConfigHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubConfigHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.StubConfigHelperBase">
            <summary>G.Core.Setting.ConfigHelperBase 的存根类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubConfigHelperBase.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubConfigHelperBase.GetString(System.String)">
            <summary>设置 ConfigHelperBase.GetString(String key) 的 存根</summary>
        </member>
        <member name="F:G.Core.Setting.Fakes.StubConfigHelperBase.GetStringString">
            <summary>设置 ConfigHelperBase.GetString(String key) 的 stub</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubConfigHelperBase.InitializeStub">
            <summary>初始化 type StubConfigHelperBase 的新实例</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubConfigHelperBase.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubConfigHelperBase.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubConfigHelperBase.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.StubConfigReader">
            <summary>G.Core.Setting.ConfigReader 的存根类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubConfigReader.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubConfigReader.GetSection(System.String)">
            <summary>设置 ConfigReader.GetSection(String sectionName) 的 存根</summary>
        </member>
        <member name="F:G.Core.Setting.Fakes.StubConfigReader.GetSectionString">
            <summary>设置 ConfigReader.GetSection(String sectionName) 的 stub</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubConfigReader.InitializeStub">
            <summary>初始化 type StubConfigReader 的新实例</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubConfigReader.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubConfigReader.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubConfigReader.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.StubConfigReaderProxy">
            <summary>G.Core.Setting.ConfigReaderProxy 的存根类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubConfigReaderProxy.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubConfigReaderProxy.GetSection(System.String)">
            <summary>设置 ConfigReaderProxy.GetSection(String sectionName) 的 存根</summary>
        </member>
        <member name="F:G.Core.Setting.Fakes.StubConfigReaderProxy.GetSectionString">
            <summary>设置 ConfigReaderProxy.GetSection(String sectionName) 的 stub</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubConfigReaderProxy.InitializeStub">
            <summary>初始化 type StubConfigReaderProxy 的新实例</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubConfigReaderProxy.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubConfigReaderProxy.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubConfigReaderProxy.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.StubNameValueSectionHandler">
            <summary>G.Core.Setting.NameValueSectionHandler 的存根类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubNameValueSectionHandler.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubNameValueSectionHandler.InitializeStub">
            <summary>初始化 type StubNameValueSectionHandler 的新实例</summary>
        </member>
        <member name="F:G.Core.Setting.Fakes.StubNameValueSectionHandler.KeyAttributeNameGet">
            <summary>设置 NameValueSectionHandler.get_KeyAttributeName() 的 stub</summary>
        </member>
        <member name="F:G.Core.Setting.Fakes.StubNameValueSectionHandler.ValueAttributeNameGet">
            <summary>设置 NameValueSectionHandler.get_ValueAttributeName() 的 stub</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubNameValueSectionHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubNameValueSectionHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubNameValueSectionHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubNameValueSectionHandler.KeyAttributeName">
            <summary>设置 NameValueSectionHandler.get_KeyAttributeName() 的 stub</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubNameValueSectionHandler.ValueAttributeName">
            <summary>设置 NameValueSectionHandler.get_ValueAttributeName() 的 stub</summary>
        </member>
        <member name="T:G.Core.Setting.Fakes.StubResourceConfigReader">
            <summary>G.Core.Setting.ResourceConfigReader 的存根类型</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubResourceConfigReader.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubResourceConfigReader.GetSection(System.String)">
            <summary>设置 ResourceConfigReader.GetSection(String sectionName) 的 存根</summary>
        </member>
        <member name="F:G.Core.Setting.Fakes.StubResourceConfigReader.GetSectionString">
            <summary>设置 ResourceConfigReader.GetSection(String sectionName) 的 stub</summary>
        </member>
        <member name="M:G.Core.Setting.Fakes.StubResourceConfigReader.InitializeStub">
            <summary>初始化 type StubResourceConfigReader 的新实例</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubResourceConfigReader.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubResourceConfigReader.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Setting.Fakes.StubResourceConfigReader.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimBase32StringCoding">
            <summary>G.Core.Text.Base32StringCoding 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimBase32StringCoding.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimBase32StringCoding.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimBase32StringCoding.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimBase32StringCoding.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimBase32StringCoding.DecodeByteArray">
            <summary>设置 Base32StringCoding.Decode(Byte[] src) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimBase32StringCoding.EncodeString">
            <summary>设置 Base32StringCoding.Encode(String src) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimBase32StringCoding.GetLengthInt32Int32">
            <summary>设置 Base32StringCoding.GetLength(Int32 n, Int32 rest) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimBase32StringCoding.SetReverseHexCharCharCharInt32">
            <summary>设置 Base32StringCoding.SetReverseHexChar(Char a, Char b, Int32 add) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimBase32StringCoding.StaticConstructor">
            <summary>设置 Base32StringCoding.Base32StringCoding() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimHexStringCoding">
            <summary>G.Core.Text.HexStringCoding 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimHexStringCoding.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimHexStringCoding.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimHexStringCoding.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimHexStringCoding.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimHexStringCoding.DecodeByteArray">
            <summary>设置 HexStringCoding.Decode(Byte[] src) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimHexStringCoding.EncodeString">
            <summary>设置 HexStringCoding.Encode(String src) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimHexStringCoding.SetReverseHexCharCharCharInt32">
            <summary>设置 HexStringCoding.SetReverseHexChar(Char a, Char b, Int32 add) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimHexStringCoding.StaticConstructor">
            <summary>设置 HexStringCoding.HexStringCoding() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimInflectionNameMapper">
            <summary>G.Core.Text.InflectionNameMapper 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimInflectionNameMapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimInflectionNameMapper.#ctor(G.Core.Text.InflectionNameMapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimInflectionNameMapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimInflectionNameMapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflectionNameMapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflectionNameMapper.Constructor">
            <summary>设置 InflectionNameMapper.InflectionNameMapper() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflectionNameMapper.MapNameString">
            <summary>设置 InflectionNameMapper.MapName(String name) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflectionNameMapper.UnmapNameString">
            <summary>设置 InflectionNameMapper.UnmapName(String name) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimInflectionNameMapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflectionNameMapper.AllInstances.MapNameString">
            <summary>设置 InflectionNameMapper.MapName(String name) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflectionNameMapper.AllInstances.UnmapNameString">
            <summary>设置 InflectionNameMapper.UnmapName(String name) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimInflector">
            <summary>G.Core.Text.Inflector 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimInflector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimInflector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimInflector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.CamelizeString">
            <summary>设置 Inflector.Camelize(String lowerCaseAndUnderscoredWord) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.CamelizeStringBoolean">
            <summary>设置 Inflector.Camelize(String lowerCaseAndUnderscoredWord, Boolean firstLetterInUppercase) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.ClassifyString">
            <summary>设置 Inflector.Classify(String tableName) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.DasherizeString">
            <summary>设置 Inflector.Dasherize(String underscoredWord) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.DemodulizeString">
            <summary>设置 Inflector.Demodulize(String classNameInModule) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.ForeignKeyString">
            <summary>设置 Inflector.ForeignKey(String className) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.ForeignKeyStringBoolean">
            <summary>设置 Inflector.ForeignKey(String className, Boolean separateClassNameAndIdWithUnderscore) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.HumanizeString">
            <summary>设置 Inflector.Humanize(String lowerCaseAndUnderscoredWord) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.Init">
            <summary>设置 Inflector.Init() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.IrregularStringString">
            <summary>设置 Inflector.Irregular(String singular, String plural) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.OrdinalizeInt32">
            <summary>设置 Inflector.Ordinalize(Int32 number) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.PluralStringString">
            <summary>设置 Inflector.Plural(String rule, String replacement) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.PluralizeString">
            <summary>设置 Inflector.Pluralize(String word) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.SingularStringString">
            <summary>设置 Inflector.Singular(String rule, String replacement) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.SingularizeString">
            <summary>设置 Inflector.Singularize(String word) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.StaticConstructor">
            <summary>设置 Inflector.Inflector() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.TableizeString">
            <summary>设置 Inflector.Tableize(String className) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.TitleizeString">
            <summary>设置 Inflector.Titleize(String word) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.UncountableStringArray">
            <summary>设置 Inflector.Uncountable(String[] words) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector.UnderscoreString">
            <summary>设置 Inflector.Underscore(String camelCasedWord) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector._Camelizeb__0Match">
            <summary>设置 Inflector.&lt;Camelize&gt;b__0(Match match) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector._Camelizeb__1Match">
            <summary>设置 Inflector.&lt;Camelize&gt;b__1(Match match) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimInflector._Titleizeb__4Match">
            <summary>设置 Inflector.&lt;Titleize&gt;b__4(Match match) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimNameMapper">
            <summary>G.Core.Text.NameMapper 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimNameMapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimNameMapper.#ctor(G.Core.Text.NameMapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimNameMapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimNameMapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimNameMapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimNameMapper.Constructor">
            <summary>设置 NameMapper.NameMapper() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimNameMapper.MapNameString">
            <summary>设置 NameMapper.MapName(String name) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimNameMapper.PrefixGet">
            <summary>设置 NameMapper.get_Prefix() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimNameMapper.StaticConstructor">
            <summary>设置 NameMapper.NameMapper() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimNameMapper.UnmapNameString">
            <summary>设置 NameMapper.UnmapName(String name) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimNameMapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimNameMapper.AllInstances.MapNameString">
            <summary>设置 NameMapper.MapName(String name) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimNameMapper.AllInstances.PrefixGet">
            <summary>设置 NameMapper.get_Prefix() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimNameMapper.AllInstances.UnmapNameString">
            <summary>设置 NameMapper.UnmapName(String name) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimShowStringAttribute">
            <summary>G.Core.Text.ShowStringAttribute 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimShowStringAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimShowStringAttribute.#ctor(G.Core.Text.ShowStringAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimShowStringAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimShowStringAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimShowStringAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimShowStringAttribute.ConstructorString">
            <summary>设置 ShowStringAttribute.ShowStringAttribute(String showString) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimShowStringAttribute.ShowStringGet">
            <summary>设置 ShowStringAttribute.get_ShowString() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimShowStringAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimShowStringAttribute.AllInstances.ShowStringGet">
            <summary>设置 ShowStringAttribute.get_ShowString() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimStringHelper">
            <summary>G.Core.Text.StringHelper 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimStringHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimStringHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimStringHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.CapitalizeString">
            <summary>设置 StringHelper.Capitalize(String s) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.EnsureEndsWithStringChar">
            <summary>设置 StringHelper.EnsureEndsWith(String s, Char c) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.EnsureEndsWithStringString">
            <summary>设置 StringHelper.EnsureEndsWith(String s, String s1) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.EnumToStringObject">
            <summary>设置 StringHelper.EnumToString(Object o) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.GetAnsiLengthString">
            <summary>设置 StringHelper.GetAnsiLength(String s) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.GetBytesByLengthByteArrayInt32">
            <summary>设置 StringHelper.GetBytesByLength(Byte[] bs, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.GetCStringString">
            <summary>设置 StringHelper.GetCString(String s) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.GetMultiByteSubStringStringInt32">
            <summary>设置 StringHelper.GetMultiByteSubString(String s, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.GetStringLeftString">
            <summary>设置 StringHelper.GetStringLeft(String s) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.GetStringLeftStringInt32">
            <summary>设置 StringHelper.GetStringLeft(String s, Int32 n) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.HashMd5String">
            <summary>设置 StringHelper.HashMd5(String s) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.HashString">
            <summary>设置 StringHelper.Hash(String s) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.IsIndentityNameString">
            <summary>设置 StringHelper.IsIndentityName(String s) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.IsSpNameString">
            <summary>设置 StringHelper.IsSpName(String s) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.MultiLineAddPrefixString">
            <summary>设置 StringHelper.MultiLineAddPrefix(String source) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.MultiLineAddPrefixStringString">
            <summary>设置 StringHelper.MultiLineAddPrefix(String source, String prefix) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.MultiLineAddPrefixStringStringChar">
            <summary>设置 StringHelper.MultiLineAddPrefix(String source, String prefix, Char splitBy) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.ProcessSymbolStringStringStringFuncOfStringString">
            <summary>设置 StringHelper.ProcessSymbol(String text, String left, String right, Func`2&lt;String,String&gt; callback) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.ReadToEndStream">
            <summary>设置 StringHelper.ReadToEnd(Stream s) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.ReadToEndStreamInt64">
            <summary>设置 StringHelper.ReadToEnd(Stream s, Int64 position) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.ReadToEndStreamReader">
            <summary>设置 StringHelper.ReadToEnd(StreamReader s) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.ReadToEndString">
            <summary>设置 StringHelper.ReadToEnd(String fileName) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.ReadToEndStringEncoding">
            <summary>设置 StringHelper.ReadToEnd(String fileName, Encoding coding) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.SplitByCaseString">
            <summary>设置 StringHelper.SplitByCase(String s) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimStringHelper.SplitStringCharInt32">
            <summary>设置 StringHelper.Split(String s, Char c, Int32 count) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimUnderlineNameMapper">
            <summary>G.Core.Text.UnderlineNameMapper 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimUnderlineNameMapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimUnderlineNameMapper.#ctor(G.Core.Text.UnderlineNameMapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimUnderlineNameMapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimUnderlineNameMapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimUnderlineNameMapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimUnderlineNameMapper.Constructor">
            <summary>设置 UnderlineNameMapper.UnderlineNameMapper() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimUnderlineNameMapper.IsLargeChar">
            <summary>设置 UnderlineNameMapper.IsLarge(Char c) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimUnderlineNameMapper.IsSmallChar">
            <summary>设置 UnderlineNameMapper.IsSmall(Char c) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimUnderlineNameMapper.MapNameString">
            <summary>设置 UnderlineNameMapper.MapName(String name) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimUnderlineNameMapper.PrefixGet">
            <summary>设置 UnderlineNameMapper.get_Prefix() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimUnderlineNameMapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimUnderlineNameMapper.AllInstances.MapNameString">
            <summary>设置 UnderlineNameMapper.MapName(String name) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimUnderlineNameMapper.AllInstances.PrefixGet">
            <summary>设置 UnderlineNameMapper.get_Prefix() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimXmlSerializable`1">
            <summary>G.Core.Text.XmlSerializable`1 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimXmlSerializable`1.#ctor(G.Core.Text.XmlSerializable{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimXmlSerializable`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimXmlSerializable`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializable`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializable`1.Constructor">
            <summary>设置 XmlSerializable`1.XmlSerializable`1() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializable`1.FromXmlString">
            <summary>设置 XmlSerializable`1.FromXml(String xml) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializable`1.ToXml">
            <summary>设置 XmlSerializable`1.ToXml() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimXmlSerializable`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializable`1.AllInstances.ToXml">
            <summary>设置 XmlSerializable`1.ToXml() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimXmlSerializer`1">
            <summary>G.Core.Text.XmlSerializer`1 的填充码类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimXmlSerializer`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimXmlSerializer`1.#ctor(G.Core.Text.XmlSerializer{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimXmlSerializer`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.ShimXmlSerializer`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializer`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializer`1.Constructor">
            <summary>设置 XmlSerializer`1.XmlSerializer`1() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializer`1.ConstructorString">
            <summary>设置 XmlSerializer`1.XmlSerializer`1(String rootName) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializer`1.DeserializeString">
            <summary>设置 XmlSerializer`1.Deserialize(String source) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializer`1.GetXmlRootAttribute">
            <summary>设置 XmlSerializer`1.GetXmlRootAttribute() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializer`1.SerializeT0">
            <summary>设置 XmlSerializer`1.Serialize(!0 obj) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializer`1.StaticConstructor">
            <summary>设置 XmlSerializer`1.XmlSerializer`1() 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.ShimXmlSerializer`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializer`1.AllInstances.DeserializeString">
            <summary>设置 XmlSerializer`1.Deserialize(String source) 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializer`1.AllInstances.GetXmlRootAttribute">
            <summary>设置 XmlSerializer`1.GetXmlRootAttribute() 的 填充码</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.ShimXmlSerializer`1.AllInstances.SerializeT0">
            <summary>设置 XmlSerializer`1.Serialize(!0 obj) 的 填充码</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.StubInflectionNameMapper">
            <summary>G.Core.Text.InflectionNameMapper 的存根类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubInflectionNameMapper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubInflectionNameMapper.InitializeStub">
            <summary>初始化 type StubInflectionNameMapper 的新实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubInflectionNameMapper.MapName(System.String)">
            <summary>设置 InflectionNameMapper.MapName(String name) 的 存根</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubInflectionNameMapper.MapNameString">
            <summary>设置 InflectionNameMapper.MapName(String name) 的 stub</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubInflectionNameMapper.PrefixGet">
            <summary>设置 UnderlineNameMapper.get_Prefix() 的 stub</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubInflectionNameMapper.UnmapName(System.String)">
            <summary>设置 InflectionNameMapper.UnmapName(String name) 的 存根</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubInflectionNameMapper.UnmapNameString">
            <summary>设置 InflectionNameMapper.UnmapName(String name) 的 stub</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubInflectionNameMapper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubInflectionNameMapper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubInflectionNameMapper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubInflectionNameMapper.Prefix">
            <summary>设置 UnderlineNameMapper.get_Prefix() 的 stub</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.StubNameMapper">
            <summary>G.Core.Text.NameMapper 的存根类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubNameMapper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubNameMapper.InitializeStub">
            <summary>初始化 type StubNameMapper 的新实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubNameMapper.MapName(System.String)">
            <summary>设置 NameMapper.MapName(String name) 的 存根</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubNameMapper.MapNameString">
            <summary>设置 NameMapper.MapName(String name) 的 stub</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubNameMapper.PrefixGet">
            <summary>设置 NameMapper.get_Prefix() 的 stub</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubNameMapper.UnmapName(System.String)">
            <summary>设置 NameMapper.UnmapName(String name) 的 存根</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubNameMapper.UnmapNameString">
            <summary>设置 NameMapper.UnmapName(String name) 的 stub</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubNameMapper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubNameMapper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubNameMapper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubNameMapper.Prefix">
            <summary>设置 NameMapper.get_Prefix() 的 stub</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.StubShowStringAttribute">
            <summary>G.Core.Text.ShowStringAttribute 的存根类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubShowStringAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubShowStringAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubShowStringAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubShowStringAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubShowStringAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubShowStringAttribute.InitializeStub">
            <summary>初始化 type StubShowStringAttribute 的新实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubShowStringAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubShowStringAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubShowStringAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubShowStringAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubShowStringAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubShowStringAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubShowStringAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubShowStringAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubShowStringAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.StubUnderlineNameMapper">
            <summary>G.Core.Text.UnderlineNameMapper 的存根类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubUnderlineNameMapper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubUnderlineNameMapper.InitializeStub">
            <summary>初始化 type StubUnderlineNameMapper 的新实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubUnderlineNameMapper.MapName(System.String)">
            <summary>设置 UnderlineNameMapper.MapName(String name) 的 存根</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubUnderlineNameMapper.MapNameString">
            <summary>设置 UnderlineNameMapper.MapName(String name) 的 stub</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubUnderlineNameMapper.PrefixGet">
            <summary>设置 UnderlineNameMapper.get_Prefix() 的 stub</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubUnderlineNameMapper.UnmapName(System.String)">
            <summary>设置 NameMapper.UnmapName(String name) 的 存根</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubUnderlineNameMapper.UnmapNameString">
            <summary>设置 NameMapper.UnmapName(String name) 的 stub</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubUnderlineNameMapper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubUnderlineNameMapper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubUnderlineNameMapper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubUnderlineNameMapper.Prefix">
            <summary>设置 UnderlineNameMapper.get_Prefix() 的 stub</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.StubXmlSerializable`1">
            <summary>G.Core.Text.XmlSerializable`1 的存根类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubXmlSerializable`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubXmlSerializable`1.InitializeStub">
            <summary>初始化 type StubXmlSerializable 的新实例</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubXmlSerializable`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubXmlSerializable`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubXmlSerializable`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:G.Core.Text.Fakes.StubXmlSerializer`1">
            <summary>G.Core.Text.XmlSerializer`1 的存根类型</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubXmlSerializer`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubXmlSerializer`1.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubXmlSerializer`1.Deserialize(System.String)">
            <summary>设置 XmlSerializer`1.Deserialize(String source) 的 存根</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubXmlSerializer`1.DeserializeString">
            <summary>设置 XmlSerializer`1.Deserialize(String source) 的 stub</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubXmlSerializer`1.InitializeStub">
            <summary>初始化 type StubXmlSerializer 的新实例</summary>
        </member>
        <member name="M:G.Core.Text.Fakes.StubXmlSerializer`1.Serialize(`0)">
            <summary>设置 XmlSerializer`1.Serialize(!0 obj) 的 存根</summary>
        </member>
        <member name="F:G.Core.Text.Fakes.StubXmlSerializer`1.SerializeT0">
            <summary>设置 XmlSerializer`1.Serialize(!0 obj) 的 stub</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubXmlSerializer`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubXmlSerializer`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:G.Core.Text.Fakes.StubXmlSerializer`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Global.Fakes.ShimCommonExtends">
            <summary>CommonExtends 的填充码类型</summary>
        </member>
        <member name="M:Global.Fakes.ShimCommonExtends.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Global.Fakes.ShimCommonExtends.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Global.Fakes.ShimCommonExtends.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Global.Fakes.ShimCommonExtends.FirstItemOf1IListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},``0})">
            <summary>设置 CommonExtends.FirstItem(IList`1&lt;!!0&gt; list) 的 填充码</summary>
        </member>
        <member name="M:Global.Fakes.ShimCommonExtends.LastItemOf1IListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},``0})">
            <summary>设置 CommonExtends.LastItem(IList`1&lt;!!0&gt; list) 的 填充码</summary>
        </member>
        <member name="M:Global.Fakes.ShimCommonExtends.LastItemOf1M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[],``0})">
            <summary>设置 CommonExtends.LastItem(!!0[] list) 的 填充码</summary>
        </member>
        <member name="M:Global.Fakes.ShimCommonExtends.RemoveFirstOf1ListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.List{``0},System.Collections.Generic.List{``0}})">
            <summary>设置 CommonExtends.RemoveFirst(List`1&lt;!!0&gt; list) 的 填充码</summary>
        </member>
        <member name="M:Global.Fakes.ShimCommonExtends.RemoveLastOf1ListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.List{``0},System.Collections.Generic.List{``0}})">
            <summary>设置 CommonExtends.RemoveLast(List`1&lt;!!0&gt; list) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.CapitalizeString">
            <summary>设置 CommonExtends.Capitalize(String s) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.CutByteArrayInt32">
            <summary>设置 CommonExtends.Cut(Byte[] bs, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.EnsureEndsWithStringChar">
            <summary>设置 CommonExtends.EnsureEndsWith(String s, Char c) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.EnsureEndsWithStringString">
            <summary>设置 CommonExtends.EnsureEndsWith(String s, String s1) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.EnumToStringEnum">
            <summary>设置 CommonExtends.EnumToString(Enum o) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.FirstItemStringArray">
            <summary>设置 CommonExtends.FirstItem(String[] array) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.GetAnsiLengthString">
            <summary>设置 CommonExtends.GetAnsiLength(String s) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.GetLeftString">
            <summary>设置 CommonExtends.GetLeft(String s) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.GetLeftStringInt32">
            <summary>设置 CommonExtends.GetLeft(String s, Int32 n) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.GetMultiByteSubStringStringInt32">
            <summary>设置 CommonExtends.GetMultiByteSubString(String s, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.IsIndentityNameString">
            <summary>设置 CommonExtends.IsIndentityName(String s) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.IsNullOrEmptyICollection">
            <summary>设置 CommonExtends.IsNullOrEmpty(ICollection list) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.IsNullOrEmptyString">
            <summary>设置 CommonExtends.IsNullOrEmpty(String s) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.LastItemStringArray">
            <summary>设置 CommonExtends.LastItem(String[] array) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.MultiLineAddPrefixString">
            <summary>设置 CommonExtends.MultiLineAddPrefix(String source) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.MultiLineAddPrefixStringString">
            <summary>设置 CommonExtends.MultiLineAddPrefix(String source, String prefix) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.MultiLineAddPrefixStringStringChar">
            <summary>设置 CommonExtends.MultiLineAddPrefix(String source, String prefix, Char splitBy) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.ReadToEndStream">
            <summary>设置 CommonExtends.ReadToEnd(Stream s) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.ReadToEndStreamInt64">
            <summary>设置 CommonExtends.ReadToEnd(Stream s, Int64 position) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.ReadToEndStreamReader">
            <summary>设置 CommonExtends.ReadToEnd(StreamReader s) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.RemoveFirstStringArray">
            <summary>设置 CommonExtends.RemoveFirst(String[] array) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.RemoveLastStringArray">
            <summary>设置 CommonExtends.RemoveLast(String[] array) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.SplitStringCharInt32">
            <summary>设置 CommonExtends.Split(String s, Char c, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.ToBase32StringGuid">
            <summary>设置 CommonExtends.ToBase32String(Guid guid) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimCommonExtends.ToCStringString">
            <summary>设置 CommonExtends.ToCString(String s) 的 填充码</summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.GCoreDelegates">
            <summary>包含用于 G.Core 的存根和填充码的自定义委托</summary>
        </member>
        <member name="T:System.Collections.Generic.Fakes.ShimXDictionary`2">
            <summary>System.Collections.Generic.XDictionary`2 的填充码类型</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.#ctor(System.Collections.Generic.XDictionary{`0,`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.Bind(System.Xml.Serialization.IXmlSerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.Bind(System.Collections.IDictionary)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.Bind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.Bind(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.Bind(System.Runtime.Serialization.IDeserializationCallback)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.ShimXDictionary`2.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.Constructor">
            <summary>设置 XDictionary`2.XDictionary`2() 的 填充码</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.ConstructorIDictionaryOfT0T1">
            <summary>设置 XDictionary`2.XDictionary`2(IDictionary`2&lt;!0,!1&gt; dictionary) 的 填充码</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.ConstructorIEqualityComparerOfT0">
            <summary>设置 XDictionary`2.XDictionary`2(IEqualityComparer`1&lt;!0&gt; comparer) 的 填充码</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.ConstructorInt32">
            <summary>设置 XDictionary`2.XDictionary`2(Int32 capacity) 的 填充码</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.ConstructorInt32IEqualityComparerOfT0">
            <summary>设置 XDictionary`2.XDictionary`2(Int32 capacity, IEqualityComparer`1&lt;!0&gt; comparer) 的 填充码</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.ConstructorSerializationInfoStreamingContext">
            <summary>设置 XDictionary`2.XDictionary`2(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.GetSchema">
            <summary>设置 XDictionary`2.GetSchema() 的 填充码</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.ReadXmlXmlReader">
            <summary>设置 XDictionary`2.ReadXml(XmlReader reader) 的 填充码</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.WriteXmlXmlWriter">
            <summary>设置 XDictionary`2.WriteXml(XmlWriter writer) 的 填充码</summary>
        </member>
        <member name="T:System.Collections.Generic.Fakes.ShimXDictionary`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.AllInstances.GetSchema">
            <summary>设置 XDictionary`2.GetSchema() 的 填充码</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.AllInstances.ReadXmlXmlReader">
            <summary>设置 XDictionary`2.ReadXml(XmlReader reader) 的 填充码</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.ShimXDictionary`2.AllInstances.WriteXmlXmlWriter">
            <summary>设置 XDictionary`2.WriteXml(XmlWriter writer) 的 填充码</summary>
        </member>
        <member name="T:System.Collections.Generic.Fakes.StubXDictionary`2">
            <summary>System.Collections.Generic.XDictionary`2 的存根类型</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.StubXDictionary`2.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.StubXDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.StubXDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.StubXDictionary`2.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.StubXDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.StubXDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.StubXDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Dictionary`2.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:System.Collections.Generic.Fakes.StubXDictionary`2.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Dictionary`2.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.StubXDictionary`2.InitializeStub">
            <summary>初始化 type StubXDictionary 的新实例</summary>
        </member>
        <member name="M:System.Collections.Generic.Fakes.StubXDictionary`2.OnDeserialization(System.Object)">
            <summary>设置 Dictionary`2.OnDeserialization(Object sender) 的 存根</summary>
        </member>
        <member name="F:System.Collections.Generic.Fakes.StubXDictionary`2.OnDeserializationObject">
            <summary>设置 Dictionary`2.OnDeserialization(Object sender) 的 stub</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.StubXDictionary`2.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.StubXDictionary`2.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:System.Collections.Generic.Fakes.StubXDictionary`2.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:System.Fakes.ShimDate">
            <summary>System.Date 的填充码类型</summary>
        </member>
        <member name="M:System.Fakes.ShimDate.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:System.Fakes.ShimDate.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:System.Fakes.ShimDate.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.EqualityOpDateDate">
            <summary>设置 Date.op_Equality(Date d1, Date d2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.ExplicitOpDateDateTime">
            <summary>设置 Date.op_Explicit(Date d) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.ExplicitOpDateTimeDate">
            <summary>设置 Date.op_Explicit(DateTime dt) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.ExplicitOpStringDate">
            <summary>设置 Date.op_Explicit(String value) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.GreaterThanOpDateDate">
            <summary>设置 Date.op_GreaterThan(Date d1, Date d2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.GreaterThanOrEqualOpDateDate">
            <summary>设置 Date.op_GreaterThanOrEqual(Date d1, Date d2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.InequalityOpDateDate">
            <summary>设置 Date.op_Inequality(Date d1, Date d2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.LessThanOpDateDate">
            <summary>设置 Date.op_LessThan(Date d1, Date d2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.LessThanOrEqualOpDateDate">
            <summary>设置 Date.op_LessThanOrEqual(Date d1, Date d2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.NowGet">
            <summary>设置 Date.get_Now() 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.ParseString">
            <summary>设置 Date.Parse(String value) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.StaticConstructor">
            <summary>设置 Date.Date() 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.SubtractionOpDateDate">
            <summary>设置 Date.op_Subtraction(Date d1, Date d2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimDate.TryParseStringDateOut">
            <summary>设置 Date.TryParse(String s, Date&amp; result) 的 填充码</summary>
        </member>
        <member name="T:System.Fakes.ShimDate.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:System.Fakes.ShimTime">
            <summary>System.Time 的填充码类型</summary>
        </member>
        <member name="M:System.Fakes.ShimTime.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:System.Fakes.ShimTime.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:System.Fakes.ShimTime.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.EqualityOpTimeTime">
            <summary>设置 Time.op_Equality(Time t1, Time t2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.ExplicitOpDateTimeTime">
            <summary>设置 Time.op_Explicit(DateTime dt) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.ExplicitOpStringTime">
            <summary>设置 Time.op_Explicit(String value) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.ExplicitOpTimeDateTime">
            <summary>设置 Time.op_Explicit(Time t) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.ExplicitOpTimeTimeSpan">
            <summary>设置 Time.op_Explicit(Time t) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.GreaterThanOpTimeTime">
            <summary>设置 Time.op_GreaterThan(Time t1, Time t2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.GreaterThanOrEqualOpTimeTime">
            <summary>设置 Time.op_GreaterThanOrEqual(Time t1, Time t2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.InequalityOpTimeTime">
            <summary>设置 Time.op_Inequality(Time t1, Time t2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.LessThanOpTimeTime">
            <summary>设置 Time.op_LessThan(Time t1, Time t2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.LessThanOrEqualOpTimeTime">
            <summary>设置 Time.op_LessThanOrEqual(Time t1, Time t2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.NowGet">
            <summary>设置 Time.get_Now() 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.ParseString">
            <summary>设置 Time.Parse(String value) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.SubtractionOpTimeTime">
            <summary>设置 Time.op_Subtraction(Time t1, Time t2) 的 填充码</summary>
        </member>
        <member name="P:System.Fakes.ShimTime.TryParseStringTimeOut">
            <summary>设置 Time.TryParse(String s, Time&amp; result) 的 填充码</summary>
        </member>
        <member name="T:System.Fakes.ShimTime.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
    </members>
</doc>
